CREATE INDEX BANK_QUERY ON BANK_TRANSACTION("DATE", WITHDRAWAL_AMT);

/* WORKSPACE QUERIES - BANK_TRANSACTION QUERIES */

-- SQL QUERY TO FIND HIGHEST AMOUNT DEBITED FROM THE BANK IN EACH YEAR 
   SELECT EXTRACT(YEAR FROM "DATE") AS YEAR, MAX(TO_NUMBER(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', '')))))
   AS HIGHEST_DEPOSITED_AMOUNT FROM BANK_TRANSACTION 
   WHERE WITHDRAWAL_AMT IS NOT NULL
   AND REGEXP_LIKE(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', ''))), '^[0-9]+(\.[0-9]+)?$')
   GROUP BY EXTRACT(YEAR FROM "DATE") 
   ORDER BY EXTRACT(YEAR FROM "DATE");

-- SQL QUERY TO FIND LOWEST AMOUNT DEBITED FROM THE BANK IN EACH YEAR 
   SELECT EXTRACT(YEAR FROM "DATE") AS YEAR, MIN(TO_NUMBER(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', ''))))) 
   AS LOWEST_DEPOSITED_AMOUNT FROM BANK_TRANSACTION 
   WHERE WITHDRAWAL_AMT IS NOT NULL
   AND REGEXP_LIKE(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', ''))), '^[0-9]+(\.[0-9]+)?$')
   GROUP BY EXTRACT(YEAR FROM "DATE") 
   ORDER BY EXTRACT(YEAR FROM "DATE"); 

-- SQL QUERY TO FIND THE 5TH HIGHEST WITHDRAWAL AMOUNT OF EACH YEAR 
   WITH HIGH_TRANSACTIONS AS(
      SELECT DISTINCT TO_NUMBER(TRIM(' ' FROM REPLACE(WITHDRAWAL_AMT, '"',''))) AS WITHDRAWAL_AMT, 
      EXTRACT(YEAR FROM "DATE") AS YEAR FROM BANK_TRANSACTION WHERE WITHDRAWAL_AMT IS NOT NULL AND 
      REGEXP_LIKE(TRIM(' ' FROM REPLACE(WITHDRAWAL_AMT, '"','')), '^[0-9]+(\.[0-9]+)?$')
   ), 
   FIFTH_HIGH_TRANSACTION AS (
      SELECT YEAR, WITHDRAWAL_AMT, ROW_NUMBER() OVER (PARTITION BY YEAR ORDER BY WITHDRAWAL_AMT DESC) AS FHT 
      FROM HIGH_TRANSACTIONS
   ) 
   SELECT YEAR, WITHDRAWAL_AMT AS FIFTH_HIGHEST_WITHDRAWAL_AMT_OF_YEAR FROM FIFTH_HIGH_TRANSACTION 
   WHERE FHT=5 ORDER BY YEAR;

-- SQL QUERY TO FIND THE FIRST FIVE LARGEST WITHDRAWAL TRANSACTIONS OCCURED IN THE YEAR 2018 
   SELECT DISTINCT TO_NUMBER(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', '')))) 
   AS FIRST_FIVE_LARGEST_TRANSACTIONS_IN_2018 FROM BANK_TRANSACTION 
   WHERE WITHDRAWAL_AMT IS NOT NULL AND EXTRACT(YEAR FROM "DATE")=2018
   AND REGEXP_LIKE(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', ''))), '^[0-9]+(\.[0-9]+)?$')
   ORDER BY TO_NUMBER(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', '')))) DESC
   OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY; 

-- SQL QUERY TO COUNT THE WITHDRAWAL TRANSACTIONS BETWEEN MAY 5,2018 AND MAR 7,2019 
   SELECT COUNT(WITHDRAWAL_AMT) FROM BANK_TRANSACTION 
   WHERE "DATE" BETWEEN '05-MAY-18' AND '07-MAR-19'
   AND WITHDRAWAL_AMT IS NOT NULL; 



/* MY PRACTICE WORK TO GET THE ABOVE WORKSPACE QUERIES */ 

 -- WITHDRAWAL_AMT IS IN THE FORMAT OF VARCHAR WITH QUOTES, SPACES, DATES  
 -- REMOVING QUOTES FROM THE WITHDRAWAL AMOUNTS 
    SELECT (REPLACE(WITHDRAWAL_AMT, '"', '')) FROM BANK_TRANSACTION

 -- REMOVING SPACES AND QUOTES FROM THE WITHDRAWAL AMOUNTS 
    SELECT (TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', '')))) AS WITHDRAWAL_AMT FROM BANK_TRANSACTION; 

 -- SOME VALUES OF WITHDRAWAL_AMT ARE DATES 
    SELECT WITHDRAWAL_AMT FROM BANK_TRANSACTION WHERE WITHDRAWAL_AMT LIKE '%-%'; 

 -- TO GET RID OF THOSE DATES IN WITHDRAWAL_AMT, IAM USING REGEXP_LIKE FUNCTION
    SELECT (TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', '')))) AS WITHDRAWAL_AMT
    FROM BANK_TRANSACTION WHERE WITHDRAWAL_AMT IS NOT NULL
    AND REGEXP_LIKE(REPLACE(WITHDRAWAL_AMT,' ',''), '^[0-9]+(\.[0-9]+)?$'); 

 -- TO CONVERT THE WITHDRAWAL_AMT TO NUMBER 
    SELECT (TO_NUMBER(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', ''))))) AS WITHDRAWAL_AMT
    FROM BANK_TRANSACTION WHERE WITHDRAWAL_AMT IS NOT NULL
    AND REGEXP_LIKE(REPLACE(WITHDRAWAL_AMT,' ',''), '^[0-9]+(\.[0-9]+)?$'); 

 -- TO GET THE MAXIMUM ELEMNT FROM THE WITHDRAWAL_AMT  
    SELECT (MAX(TO_NUMBER(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', '')))))) AS MAX_WITHDRAWAL_AMT
    FROM BANK_TRANSACTION WHERE WITHDRAWAL_AMT IS NOT NULL
    AND REGEXP_LIKE(REPLACE(WITHDRAWAL_AMT,' ',''), '^[0-9]+(\.[0-9]+)?$'); 

 -- TO GET THE MINIMUM ELEMENT FROM THE WITHDRAWAL_AMT 
    SELECT (MIN(TO_NUMBER(TRIM(' ' FROM (REPLACE(WITHDRAWAL_AMT, '"', '')))))) AS MIN_WITHDRAWAL_AMT
    FROM BANK_TRANSACTION WHERE WITHDRAWAL_AMT IS NOT NULL
    AND REGEXP_LIKE(REPLACE(WITHDRAWAL_AMT,' ',''), '^[0-9]+(\.[0-9]+)?$');


/* SAMPLE WORK ON OUR PROJECT - BANK MANAGEMENT SYSTEM */ 

/* CREATION OF TABLES - BRANCH, CUSTOMER, TRANSACTION, LOAN, ACCOUNT, CARD, LOAN_TYPE.
BRANCH, CUSTOMER, TRANSACTION, LOAN, ACCOUNT, CARD, LOAN_TYPE TABLES WERE ALREADY PRESENT IN THE DATABASE
SO IAM CREATING THE SAMPLE TABLES WITH THE NAMES- BRANCHES, CUSTOMERS,ACCOUNTS,CARDS, TRANSACTIONS, LOANS, LOAN_TYPES*/ 

 -- BRANCHES TABLE
    CREATE TABLE BRANCHES(ID NUMBER PRIMARY KEY NOT NULL, NAME VARCHAR2(50), ADDRESS VARCHAR2(50));

 -- CARDS TABLE
    CREATE TABLE CARDS(ID NUMBER PRIMARY KEY NOT NULL, CARDNUMBER VARCHAR2(50), 
    EXPIRATION_DATE DATE, IS_BLOCKED NUMBER(1)); 

 -- LOAN_TYPES TABLE
    CREATE TABLE LOAN_TYPES(ID NUMBER PRIMARY KEY NOT NULL, TYPE VARCHAR2(100), DESCRIPTION VARCHAR2(100),
    BASE_AMOUNT NUMBER(10), BASE_INTEREST_RATE NUMBER(10)); 

 -- CUSTOMERS TABLE
    CREATE TABLE CUSTOMERS(ID NUMBER PRIMARY KEY NOT NULL, BRANCH_ID NUMBER, FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50), DATE_OF_BIRTH DATE, GENDER VARCHAR2(6),
    FOREIGN KEY(BRANCH_ID) REFERENCES BRANCHES(ID)); 

 -- ACCOUNTS TABLE
    CREATE TABLE ACCOUNTS(ID NUMBER PRIMARY KEY NOT NULL, CUSTOMER_ID NUMBER(10), CARD_ID NUMBER(10),
    BALANCE VARCHAR2(50),FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID), 
    FOREIGN KEY (CARD_ID) REFERENCES CARDS(ID)) 

 -- LOANS TYPES
    CREATE TABLE LOANS(ID NUMBER PRIMARY KEY NOT NULL, ACCOUNT_ID NUMBER, LOAN_TYPE_ID NUMBER, 
    ACCOUNT_PAID DECIMAL(10,3), START_DATE DATE, DUE_DATE DATE,
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID), FOREIGN KEY(LOAN_TYPE_ID) REFERENCES LOAN_TYPES(ID)); 
    ALTER TABLE LOANS RENAME COLUMN ACCOUNT_PAID TO AMOUNT_PAID;

 -- TRANSACTIONS TABLE
    CREATE TABLE TRANSACTIONS(ID NUMBER PRIMARY KEY NOT NULL, ACCOUNT_ID NUMBER, DESCRIPTION VARCHAR2(100),
    AMOUNT DECIMAL(10,3), TDATE DATE, FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ID)); 

/* INSERTING RECORDS INTO THE TABLES BY USING PROCEDURES*/ 

  -- PROCEDURE FOR INSERTING TABLES INTO BRANCHES
     CREATE OR REPLACE PROCEDURE INSERT_BRANCHES(NEW_ID IN BRANCHES.ID%TYPE, NEW_NAME IN BRANCHES.NAME%TYPE, NEW_ADDRESS IN BRANCHES.ADDRESS%TYPE)
     AS 
     BEGIN
     INSERT INTO BRANCHES VALUES(NEW_ID,NEW_NAME,NEW_ADDRESS);
     END;

  -- INSERTING RECORDS INTO BRANCHES 
     EXEC INSERT_BRANCHES(1,'AXIS BANK', 'AXIS-BANK-HYD'); 
     EXEC INSERT_BRANCHES(2,'ICICI BANK', 'ICICI-BANK-CHN');
     EXEC INSERT_BRANCHES(3,'SBI BANK', 'SBI-BANK-AP');
     EXEC INSERT_BRANCHES(4,'HDFC BANK', 'HDFC-BANK-BANG');
     EXEC INSERT_BRANCHES(5,'UNION BANK', 'UNION-BANK-AP');

     SELECT * FROM BRANCHES; 
 
  -- PROCEDURE FOR INSERTING RECORDS INTO CARDS
     CREATE OR REPLACE PROCEDURE INSERT_CARDS(NEW_ID IN CARDS.ID%TYPE, NEW_CARDNUMBER IN CARDS.CARDNUMBER%TYPE, 
     NEW_EXPIRATION_DATE IN CARDS.EXPIRATION_DATE%TYPE, NEW_IS_BLOCKED IN CARDS.IS_BLOCKED%TYPE)
     AS 
     BEGIN 
     INSERT INTO CARDS VALUES(NEW_ID,NEW_CARDNUMBER,NEW_EXPIRATION_DATE, NEW_IS_BLOCKED);
     END; 

  -- INSERTING RECORDS INTO CARDS 
     EXEC INSERT_CARDS(11,'1111','01-JAN-2025',1); 
     EXEC INSERT_CARDS(22,'2222','01-JUL-2026',0);
     EXEC INSERT_CARDS(33,'3333','01-NOV-2027',1);
     EXEC INSERT_CARDS(44,'4444','01-APR-2025',0);

     SELECT * FROM CARDS; 

  -- PROCEDURE FOR INSERTING RECORDS INTO LOAN_TYPES
     CREATE OR REPLACE PROCEDURE INSERT_LOAN_TYPES(NEW_ID IN LOAN_TYPES.ID%TYPE, NEW_TYPE IN LOAN_TYPES.TYPE%TYPE, 
     NEW_DESCRIPTION IN LOAN_TYPES.DESCRIPTION%TYPE, NEW_BASE_AMOUNT IN LOAN_TYPES.BASE_AMOUNT%TYPE,
     NEW_BASE_INTEREST_RATE IN LOAN_TYPES.BASE_INTEREST_RATE%TYPE) 
     AS 
     BEGIN 
     INSERT INTO LOAN_TYPES VALUES(NEW_ID,NEW_TYPE,NEW_DESCRIPTION,NEW_BASE_AMOUNT,NEW_BASE_INTEREST_RATE);
     END; 

  -- INSERTING RECORDS INTO LOAN_TYPES TABLE 
     EXEC INSERT_LOAN_TYPES(101,'Personal Loan', 'PL', 30000, 3);
     EXEC INSERT_LOAN_TYPES(102,'Educational Loan', 'EL', 50000, 4);
     EXEC INSERT_LOAN_TYPES(103,'Vehicle Loan', 'VL', 20000, 2);
     EXEC INSERT_LOAN_TYPES(104, 'Home Loan', 'HL', 15000, 3); 

     SELECT * FROM LOAN_TYPES; 

  -- PROCEDURE FOR INSERTING RECORDS INTO CUSTOMERS
     CREATE OR REPLACE PROCEDURE INSERT_CUSTOMERS(NEW_ID IN CUSTOMERS.ID%TYPE,NEW_BRANCH_ID IN CUSTOMERS.BRANCH_ID%TYPE,
     NEW_FIRST_NAME IN CUSTOMERS.FIRST_NAME%TYPE,NEW_LAST_NAME IN CUSTOMERS.LAST_NAME%TYPE, 
     NEW_DATE_OF_BIRTH IN CUSTOMERS.DATE_OF_BIRTH%TYPE, NEW_GENDER IN CUSTOMERS.GENDER%TYPE)
     AS 
     BEGIN
     INSERT INTO CUSTOMERS VALUES(NEW_ID,NEW_BRANCH_ID,NEW_FIRST_NAME,NEW_LAST_NAME,NEW_DATE_OF_BIRTH,NEW_GENDER);
     END; 

  -- INSERTING RECORDS INTO CUSTOMERS
     EXEC INSERT_CUSTOMERS(1001,2,'Lakshmi','Sri','07-JUN-2002','Female');
     EXEC INSERT_CUSTOMERS(1002,1,'Mouni','Sri','09-SEP-1999','Female');
     EXEC INSERT_CUSTOMERS(1003,2,'Hema','Sri','07-MAY-1996','Female');
     EXEC INSERT_CUSTOMERS(1004,3,'Gopi','Bandaru','07-JUL-1997','Male');
     EXEC INSERT_CUSTOMERS(1005,5,'Ashish','Sai Pavan','10-NOV-2003','Male');
     EXEC INSERT_CUSTOMERS(1006,5,'Sai','Sri Karthik','24-APR-2002','Male');
     EXEC INSERT_CUSTOMERS(1007,1,'Lalitha','Sri','11-NOV-2004','Female'); 

     SELECT * FROM CUSTOMERS; 

  -- PROCEDURE FOR INSERTING RECORDS INTO ACCOUNTS
     CREATE OR REPLACE PROCEDURE INSERT_ACCOUNTS(NEW_ID IN ACCOUNTS.ID%TYPE, NEW_CUSTOMER_ID IN ACCOUNTS.CUSTOMER_ID%TYPE,
     NEW_CARD_ID IN ACCOUNTS.CARD_ID%TYPE, NEW_BALANCE IN ACCOUNTS.BALANCE%TYPE)
     AS 
     BEGIN
     INSERT INTO ACCOUNTS VALUES(NEW_ID,NEW_CUSTOMER_ID,NEW_CARD_ID,NEW_BALANCE);
     END; 

  -- INSERTING RECORDS INTO ACCOUNTS
     EXEC INSERT_ACCOUNTS(10001,1001,11,2500); 
     EXEC INSERT_ACCOUNTS(10002,1002,11,4500); 
     EXEC INSERT_ACCOUNTS(10003,1003,33,3000); 
     EXEC INSERT_ACCOUNTS(10004,1004,44,5500); 
     EXEC INSERT_ACCOUNTS(10005,1005,22,2000); 
     EXEC INSERT_ACCOUNTS(10006,1006,33,2300); 
     EXEC INSERT_ACCOUNTS(10007,1007,44,2800); 

     SELECT * FROM ACCOUNTS; 

  -- PROCEDURE FOR INSERTING RECORDS INTO TRANSACTIONS 
     CREATE OR REPLACE PROCEDURE INSERT_TRANSACTIONS(NEW_ID IN TRANSACTIONS.ID%TYPE, NEW_ACCOUNT_ID IN 
     TRANSACTIONS.ACCOUNT_ID%TYPE, NEW_DESCRIPTION IN TRANSACTIONS.DESCRIPTION%TYPE, 
     NEW_AMOUNT IN TRANSACTIONS.AMOUNT%TYPE, NEW_TDATE IN TRANSACTIONS.TDATE%TYPE)
     AS 
     BEGIN 
     INSERT INTO TRANSACTIONS VALUES(NEW_ID, NEW_ACCOUNT_ID, NEW_DESCRIPTION, NEW_AMOUNT, NEW_TDATE);
     END; 

  -- INSERTING RECORDS INTO TRANSACTIONS
     EXEC INSERT_TRANSACTIONS(111,10001,'CREDIT',1000.00,'23-JUN-2023'); 
     EXEC INSERT_TRANSACTIONS(222,10005,'DEBIT',250.00,'03-JUL-2023'); 
     EXEC INSERT_TRANSACTIONS(333,10003,'CREDIT',800.63,'09-APR-2023'); 
     EXEC INSERT_TRANSACTIONS(444,10006,'DEBIT',1500.02,'28-MAY-2023'); 
     EXEC INSERT_TRANSACTIONS(555,10005,'CREDIT',100.00,'23-JUN-2023'); 

     SELECT * FROM TRANSACTIONS; 

  -- PROCEDURE FOR INSERTING RECORDS INTO LOANS
     CREATE OR REPLACE PROCEDURE INSERT_LOANS(NEW_ID IN LOANS.ID%TYPE, NEW_ACCOUNT_ID IN LOANS.ACCOUNT_ID%TYPE,
     NEW_LOAN_TYPE_ID IN LOANS.LOAN_TYPE_ID%TYPE, NEW_AMOUNT_PAID IN LOANS.AMOUNT_PAID%TYPE, 
     NEW_START_DATE IN LOANS.START_DATE%TYPE, NEW_DUE_DATE IN LOANS.DUE_DATE%TYPE)
     AS 
     BEGIN 
     INSERT INTO LOANS VALUES(NEW_ID, NEW_ACCOUNT_ID, NEW_LOAN_TYPE_ID,NEW_AMOUNT_PAID,NEW_START_DATE, NEW_DUE_DATE);
     END; 

  -- INSERTING RECORDS INTO LOANS
    EXEC INSERT_LOANS(11111,10002,102,5000.00,'01-JAN-2023','01-JAN-2024');
    EXEC INSERT_LOANS(22222,10005,101,2000.00,'23-JUN-2023','23-JUN-2024');
    EXEC INSERT_LOANS(33333,10004,103,6000.00,'01-JUL-2023','01-JUL-2024');
    EXEC INSERT_LOANS(44444,10006,104,1000.00,'05-MAY-2023','05-MAY-2024'); 
    
    SELECT * FROM LOANS;

/* RETRIEVING THE RECORDS FROM THE SINGLE TABLES USING CLAUSES*/ 

 -- FETCH THE LIST OF BRANCHES WHOSE NAME IS 'SBI BANK'
    SELECT * FROM BRANCHES WHERE NAME='SBI BANK'; 

 -- FETCH THE LIST OF BRANCHES WHOSE NAME START WITH LETTER 'A' AND ITS ID MUST BE '1' 
    SELECT * FROM BRANCHES WHERE NAME LIKE 'A%' AND ID=1;

 -- FETCH THE CUSTOMER FIRST NAME AND LAST NAME AS CUSTOMER_NAME AND THEN SORT THEM BY THEIR FIRST_NAME
    SELECT FIRST_NAME || ' ' || LAST_NAME AS CUSTOMER_NAME FROM CUSTOMERS ORDER BY FIRST_NAME; 

 -- FETCH ALL THE RECORDS FROM CUSTOMERS TABLE WHO ARE FEMALES. THEN SORT THE RECORDS BY THEIR FIRST_NAME
    SELECT * FROM CUSTOMERS WHERE GENDER='Female' ORDER BY FIRST_NAME; 

 -- FIND THE SUM OF AMOUNTS FROM THE TRANSACTION TABLE
    SELECT SUM(AMOUNT) AS TOTAL_AMOUNT FROM TRANSACTIONS; 

 -- FIND THE MAXIMUM AMOUNTS FROM THE TRANSACTIONS TABLE
    SELECT MAX(AMOUNT) FROM TRANSACTIONS;

 -- FIND THE MINIMUM AMOUNT FROM THE TRANSACTIONS TABLE
    SELECT MIN(AMOUNT) FROM TRANSACTIONS; 

 -- FETCH THE ACTIVE CARD NUMBERS FROM THE CARDS TABLE
    SELECT CARDNUMBER AS ACTIVE_CARDS FROM CARDS WHERE IS_BLOCKED=1; 

 -- FIND THE MAXIMUM BALANCE FROM ACCOUNTS TABLE
    SELECT MAX(TO_NUMBER(BALANCE)) FROM ACCOUNTS; 

 -- FETCH ALL THE RECORDS FROM ACCOUNTS TABLE . SORT THEM BY THEIR BALANCE
    SELECT * FROM ACCOUNTS ORDER BY TO_NUMBER(BALANCE) DESC; 

 -- FETCH ALL THE RECORDS FROM LOANS WHOSE RECORDS ARE FROM 01-JAN-2022 TO 01-JUL-2023
    SELECT * FROM LOANS WHERE START_DATE BETWEEN '01-JAN-2022' AND '01-JUL-2023';  

 -- FIND COUNT OF ACCOUNTS OF EACH LOAN_TYPE_ID FROM THE LOANS TABLE. USE GROUP BY FUNCTION
    SELECT COUNT(ACCOUNT_ID) AS COUNT, LOAN_TYPE_ID FROM LOANS GROUP BY LOAN_TYPE_ID; 


/* PERFORMING SAMPLE QUERIES ON JOINS ON TABLES WHICH I HAVE CREATED */

 -- RIGHT JOIN ON BRANCHES AND CUSTOMERS TABLES
    SELECT * FROM BRANCHES RIGHT JOIN CUSTOMERS ON BRANCHES.ID=CUSTOMERS.BRANCH_ID; 

 -- LEFT JOIN JOIN ON CARDS AND ACCOUNTS TABLES
    SELECT * FROM CARDS LEFT JOIN ACCOUNTS ON ACCOUNTS.CARD_ID=CARDS.ID;

 -- FULL JOIN ON LOANS AND LOAN_TYPES TABLES
    SELECT * FROM LOANS FULL JOIN LOAN_TYPES ON LOANS.LOAN_TYPE_ID=LOAN_TYPES.ID;

 -- LEFT JOIN BETWEEN ACCOUNTS AND TRANSACTIONS AND RIGHT JOIN BETWEEN LOANS AND ACCOUNTS TABLES
    SELECT * FROM ACCOUNTS LEFT JOIN TRANSACTIONS ON ACCOUNTS.ID=TRANSACTIONS.ACCOUNT_ID RIGHT JOIN 
    LOANS ON ACCOUNTS.ID=LOANS.ACCOUNT_ID; 

 -- FETCH THE CUSTOMER ID AND BRANCH NAME WHOSE BRANCH NAME STARTS WITH LETTER 'A'. FULL JOIN BETWEEN CUSTOMERS AND BRANCHES TO GET THE RESULTS
    SELECT CUSTOMERS.ID AS CUSTOMER_ID, BRANCHES.NAME FROM BRANCHES FULL JOIN CUSTOMERS ON 
    CUSTOMERS.BRANCH_ID=BRANCHES.ID WHERE BRANCHES.NAME LIKE 'A%'; 

 -- PERFORMING JOINS ON CUSTOMERS AND ACCOUNTS
    SELECT CUSTOMERS.ID AS CUSTOMER_ID, CUSTOMERS.FIRST_NAME AS CUSTOMERS_NAME, 
    ACCOUNTS.BALANCE AS REMAINING_BALANCE FROM CUSTOMERS JOIN ACCOUNTS ON 
    ACCOUNTS.CUSTOMER_ID=CUSTOMERS.ID; 

 -- FETCHING THE ACCOUNTS ID AND LOANS ID WHERE LOAN_TYPES DESCRIPTION MUST BE 'EL'. PERFROM FULL JOINS BETWEEN THE TABLES.
    SELECT ACCOUNTS.ID AS ACCOUNT_ID, LOANS.ID AS LOAN_ID FROM ACCOUNTS FULL JOIN 
    LOANS ON ACCOUNTS.ID=LOANS.ACCOUNT_ID 
    FULL JOIN LOAN_TYPES ON LOAN_TYPES.ID=LOANS.LOAN_TYPE_ID WHERE LOAN_TYPES.DESCRIPTION='EL';


